{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPtrzg202AnfATPAe8bAnGD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Shreyacy/BIS-LAB/blob/main/LAB%20TEST-CUCKOO%20SEARCH\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UvCkhKsukkbc",
        "outputId": "64f94807-162f-4b7c-ab5f-2c27313df265"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-10b600a0dcb1>:9: DeprecationWarning: `np.math` is a deprecated alias for the standard library `math` module (Deprecated Numpy 1.25). Replace usages of `np.math` with `math`\n",
            "  sigma_u = (np.math.gamma(1 + Lambda) * np.sin(np.pi * Lambda / 2) /\n",
            "<ipython-input-3-10b600a0dcb1>:10: DeprecationWarning: `np.math` is a deprecated alias for the standard library `math` module (Deprecated Numpy 1.25). Replace usages of `np.math` with `math`\n",
            "  (np.math.gamma((1 + Lambda) / 2) * Lambda * 2**((Lambda - 1) / 2)))**(1 / Lambda)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 1: Best Fitness = 50.288101321706414\n",
            "Iteration 2: Best Fitness = 19.12529685201535\n",
            "Iteration 3: Best Fitness = 19.12529685201535\n",
            "Iteration 4: Best Fitness = 19.12529685201535\n",
            "Iteration 5: Best Fitness = 19.12529685201535\n",
            "Iteration 6: Best Fitness = 19.12529685201535\n",
            "Iteration 7: Best Fitness = 19.12529685201535\n",
            "Iteration 8: Best Fitness = 19.107345965467395\n",
            "Iteration 9: Best Fitness = 19.107345965467395\n",
            "Iteration 10: Best Fitness = 19.107345965467395\n",
            "Iteration 11: Best Fitness = 16.655448360962268\n",
            "Iteration 12: Best Fitness = 15.930686948772316\n",
            "Iteration 13: Best Fitness = 13.715038090496396\n",
            "Iteration 14: Best Fitness = 10.1735165797228\n",
            "Iteration 15: Best Fitness = 7.78428716139993\n",
            "Iteration 16: Best Fitness = 7.584153616685333\n",
            "Iteration 17: Best Fitness = 7.18265151990225\n",
            "Iteration 18: Best Fitness = 6.845826053979762\n",
            "Iteration 19: Best Fitness = 6.845826053979762\n",
            "Iteration 20: Best Fitness = 4.1345507775584105\n",
            "Iteration 21: Best Fitness = 4.1345507775584105\n",
            "Iteration 22: Best Fitness = 4.1345507775584105\n",
            "Iteration 23: Best Fitness = 4.1345507775584105\n",
            "Iteration 24: Best Fitness = 4.1345507775584105\n",
            "Iteration 25: Best Fitness = 4.1345507775584105\n",
            "Iteration 26: Best Fitness = 4.1345507775584105\n",
            "Iteration 27: Best Fitness = 1.9432653062682603\n",
            "Iteration 28: Best Fitness = 1.9432653062682603\n",
            "Iteration 29: Best Fitness = 1.6403571887215271\n",
            "Iteration 30: Best Fitness = 1.6403571887215271\n",
            "Iteration 31: Best Fitness = 1.6403571887215271\n",
            "Iteration 32: Best Fitness = 1.6403571887215271\n",
            "Iteration 33: Best Fitness = 1.6403571887215271\n",
            "Iteration 34: Best Fitness = 1.0579142782229218\n",
            "Iteration 35: Best Fitness = 1.0579142782229218\n",
            "Iteration 36: Best Fitness = 1.0579142782229218\n",
            "Iteration 37: Best Fitness = 1.0579142782229218\n",
            "Iteration 38: Best Fitness = 0.7383178764069536\n",
            "Iteration 39: Best Fitness = 0.6557526239635713\n",
            "Iteration 40: Best Fitness = 0.33131707189244175\n",
            "Iteration 41: Best Fitness = 0.33131707189244175\n",
            "Iteration 42: Best Fitness = 0.33131707189244175\n",
            "Iteration 43: Best Fitness = 0.33131707189244175\n",
            "Iteration 44: Best Fitness = 0.3134622302833851\n",
            "Iteration 45: Best Fitness = 0.19959078125415097\n",
            "Iteration 46: Best Fitness = 0.14309293247216243\n",
            "Iteration 47: Best Fitness = 0.14309293247216243\n",
            "Iteration 48: Best Fitness = 0.14309293247216243\n",
            "Iteration 49: Best Fitness = 0.14309293247216243\n",
            "Iteration 50: Best Fitness = 0.12786844039758646\n",
            "Iteration 51: Best Fitness = 0.089079145737249\n",
            "Iteration 52: Best Fitness = 0.089079145737249\n",
            "Iteration 53: Best Fitness = 0.089079145737249\n",
            "Iteration 54: Best Fitness = 0.089079145737249\n",
            "Iteration 55: Best Fitness = 0.07897368012796917\n",
            "Iteration 56: Best Fitness = 0.07541345549725356\n",
            "Iteration 57: Best Fitness = 0.07541345549725356\n",
            "Iteration 58: Best Fitness = 0.07541345549725356\n",
            "Iteration 59: Best Fitness = 0.07102587879440658\n",
            "Iteration 60: Best Fitness = 0.04553593859106733\n",
            "Iteration 61: Best Fitness = 0.04553593859106733\n",
            "Iteration 62: Best Fitness = 0.04553593859106733\n",
            "Iteration 63: Best Fitness = 0.04553593859106733\n",
            "Iteration 64: Best Fitness = 0.011492731472988313\n",
            "Iteration 65: Best Fitness = 0.011492731472988313\n",
            "Iteration 66: Best Fitness = 0.009517331256219161\n",
            "Iteration 67: Best Fitness = 0.009517331256219161\n",
            "Iteration 68: Best Fitness = 0.009517331256219161\n",
            "Iteration 69: Best Fitness = 0.009517331256219161\n",
            "Iteration 70: Best Fitness = 0.009517331256219161\n",
            "Iteration 71: Best Fitness = 0.009517331256219161\n",
            "Iteration 72: Best Fitness = 0.009517331256219161\n",
            "Iteration 73: Best Fitness = 0.004479505181333791\n",
            "Iteration 74: Best Fitness = 0.004479505181333791\n",
            "Iteration 75: Best Fitness = 0.004479505181333791\n",
            "Iteration 76: Best Fitness = 0.004479505181333791\n",
            "Iteration 77: Best Fitness = 0.0010319676008316149\n",
            "Iteration 78: Best Fitness = 0.0010319676008316149\n",
            "Iteration 79: Best Fitness = 0.0010319676008316149\n",
            "Iteration 80: Best Fitness = 0.0010319676008316149\n",
            "Iteration 81: Best Fitness = 0.0010319676008316149\n",
            "Iteration 82: Best Fitness = 0.0010319676008316149\n",
            "Iteration 83: Best Fitness = 0.0010319676008316149\n",
            "Iteration 84: Best Fitness = 0.0010319676008316149\n",
            "Iteration 85: Best Fitness = 0.0010319676008316149\n",
            "Iteration 86: Best Fitness = 0.0008298007948127138\n",
            "Iteration 87: Best Fitness = 0.0008298007948127138\n",
            "Iteration 88: Best Fitness = 0.0005702209804811038\n",
            "Iteration 89: Best Fitness = 0.00012220183771154868\n",
            "Iteration 90: Best Fitness = 0.00012220183771154868\n",
            "Iteration 91: Best Fitness = 0.00012220183771154868\n",
            "Iteration 92: Best Fitness = 0.00012220183771154868\n",
            "Iteration 93: Best Fitness = 0.00012220183771154868\n",
            "Iteration 94: Best Fitness = 0.00012220183771154868\n",
            "Iteration 95: Best Fitness = 0.00012220183771154868\n",
            "Iteration 96: Best Fitness = 0.00012220183771154868\n",
            "Iteration 97: Best Fitness = 0.00012220183771154868\n",
            "Iteration 98: Best Fitness = 0.00012220183771154868\n",
            "Iteration 99: Best Fitness = 0.00011331288117550867\n",
            "Iteration 100: Best Fitness = 5.4174487629793634e-05\n",
            "Best Solution: [ 0.00552786  0.00438478 -0.00073421  0.00011508 -0.00195926]\n",
            "Best Objective Value: 5.4174487629793634e-05\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "# Objective function (e.g., Sphere function)\n",
        "def objective_function(x):\n",
        "    return sum(x**2)\n",
        "\n",
        "# Lévy flight step\n",
        "def levy_flight(Lambda):\n",
        "    sigma_u = (np.math.gamma(1 + Lambda) * np.sin(np.pi * Lambda / 2) /\n",
        "               (np.math.gamma((1 + Lambda) / 2) * Lambda * 2**((Lambda - 1) / 2)))**(1 / Lambda)\n",
        "    sigma_v = 1\n",
        "    u = np.random.normal(0, sigma_u, 1)\n",
        "    v = np.random.normal(0, sigma_v, 1)\n",
        "    step = u / abs(v)**(1 / Lambda)\n",
        "    return step\n",
        "\n",
        "# Cuckoo Search algorithm\n",
        "def cuckoo_search(num_nests=25, max_iter=100, discovery_rate=0.25, dim=5, lower_bound=-10, upper_bound=10):\n",
        "    # Initialize nests randomly\n",
        "    nests = np.random.uniform(lower_bound, upper_bound, (num_nests, dim))\n",
        "    fitness = np.array([objective_function(nest) for nest in nests])\n",
        "\n",
        "    # Best solution initialization\n",
        "    best_nest = nests[np.argmin(fitness)]\n",
        "    best_fitness = np.min(fitness)\n",
        "\n",
        "    for iteration in range(max_iter):\n",
        "        # Generate new solutions using Lévy flights\n",
        "        for i in range(num_nests):\n",
        "            step_size = levy_flight(1.5) * (nests[i] - best_nest)\n",
        "            new_nest = nests[i] + step_size * np.random.uniform(-1, 1, dim)\n",
        "            new_nest = np.clip(new_nest, lower_bound, upper_bound)\n",
        "\n",
        "            new_fitness = objective_function(new_nest)\n",
        "            if new_fitness < fitness[i]:\n",
        "                nests[i] = new_nest\n",
        "                fitness[i] = new_fitness\n",
        "\n",
        "        # Abandon a fraction of the worst nests\n",
        "        worst_nests = np.argsort(fitness)[-int(discovery_rate * num_nests):]\n",
        "        for i in worst_nests:\n",
        "            nests[i] = np.random.uniform(lower_bound, upper_bound, dim)\n",
        "            fitness[i] = objective_function(nests[i])\n",
        "\n",
        "        # Update the best solution\n",
        "        current_best_idx = np.argmin(fitness)\n",
        "        if fitness[current_best_idx] < best_fitness:\n",
        "            best_nest = nests[current_best_idx]\n",
        "            best_fitness = fitness[current_best_idx]\n",
        "\n",
        "        print(f\"Iteration {iteration + 1}: Best Fitness = {best_fitness}\")\n",
        "\n",
        "    return best_nest, best_fitness\n",
        "\n",
        "# Run Cuckoo Search\n",
        "best_solution, best_value = cuckoo_search()\n",
        "print(\"Best Solution:\", best_solution)\n",
        "print(\"Best Objective Value:\", best_value)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math  # Import the standard math library\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Load dataset\n",
        "data = load_iris()\n",
        "X = data.data\n",
        "y = data.target\n",
        "num_features = X.shape[1]\n",
        "\n",
        "# Objective function: Combines accuracy and number of selected features\n",
        "def objective_function(feature_mask):\n",
        "    selected_features = np.where(feature_mask == 1)[0]\n",
        "    if len(selected_features) == 0:  # Avoid empty feature sets\n",
        "        return float('inf')\n",
        "\n",
        "    X_selected = X[:, selected_features]\n",
        "    clf = RandomForestClassifier(random_state=0)\n",
        "    scores = cross_val_score(clf, X_selected, y, cv=3)  # Use cross-validation\n",
        "    accuracy = np.mean(scores)\n",
        "\n",
        "    penalty = len(selected_features) / num_features\n",
        "    return -accuracy + penalty  # Minimize (negative accuracy + penalty)\n",
        "\n",
        "# Lévy flight step for binary representation\n",
        "def levy_flight_binary(Lambda, current_position, best_position):\n",
        "    step_size = levy_flight(Lambda)\n",
        "    new_position = current_position + step_size * (best_position - current_position)\n",
        "    new_position = 1 / (1 + np.exp(-new_position))  # Apply sigmoid for probabilities\n",
        "    binary_position = (new_position > 0.5).astype(int)  # Convert probabilities to binary\n",
        "    return binary_position\n",
        "\n",
        "# Lévy flight function\n",
        "def levy_flight(Lambda):\n",
        "    sigma_u = (math.gamma(1 + Lambda) * math.sin(math.pi * Lambda / 2) /\n",
        "               (math.gamma((1 + Lambda) / 2) * Lambda * 2**((Lambda - 1) / 2)))**(1 / Lambda)\n",
        "    sigma_v = 1\n",
        "    u = np.random.normal(0, sigma_u, 1)\n",
        "    v = np.random.normal(0, sigma_v, 1)\n",
        "    step = u / abs(v)**(1 / Lambda)\n",
        "    return step\n",
        "\n",
        "# Cuckoo Search for feature selection\n",
        "def cuckoo_search(num_nests=10, max_iter=5, discovery_rate=0.25, dim=num_features):\n",
        "    nests = np.random.randint(0, 2, (num_nests, dim))\n",
        "    fitness = np.array([objective_function(nest) for nest in nests])\n",
        "\n",
        "    best_nest = nests[np.argmin(fitness)]\n",
        "    best_fitness = np.min(fitness)\n",
        "\n",
        "    for iteration in range(max_iter):\n",
        "        for i in range(num_nests):\n",
        "            new_nest = levy_flight_binary(1.5, nests[i], best_nest)\n",
        "            new_fitness = objective_function(new_nest)\n",
        "\n",
        "            if new_fitness < fitness[i]:\n",
        "                nests[i] = new_nest\n",
        "                fitness[i] = new_fitness\n",
        "\n",
        "        worst_nests = np.argsort(fitness)[-int(discovery_rate * num_nests):]\n",
        "        for i in worst_nests:\n",
        "            nests[i] = np.random.randint(0, 2, dim)\n",
        "            fitness[i] = objective_function(nests[i])\n",
        "\n",
        "        current_best_idx = np.argmin(fitness)\n",
        "        if fitness[current_best_idx] < best_fitness:\n",
        "            best_nest = nests[current_best_idx]\n",
        "            best_fitness = fitness[current_best_idx]\n",
        "\n",
        "        print(f\"Iteration {iteration + 1}: Best Fitness = {-best_fitness}\")\n",
        "\n",
        "    return best_nest, -best_fitness\n",
        "\n",
        "# Run Cuckoo Search for Feature Selection\n",
        "best_features, best_accuracy = cuckoo_search()\n",
        "selected_features = np.where(best_features == 1)[0]\n",
        "\n",
        "print(\"Selected Features:\", selected_features)\n",
        "print(\"Best Cross-Validation Accuracy:\", best_accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WN7ON_mImgEU",
        "outputId": "72df891d-189e-4759-a74e-24827a15cc7f"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 1: Best Fitness = 0.6833333333333332\n",
            "Iteration 2: Best Fitness = 0.6833333333333332\n",
            "Iteration 3: Best Fitness = 0.6833333333333332\n",
            "Iteration 4: Best Fitness = 0.6833333333333332\n",
            "Iteration 5: Best Fitness = 0.7033333333333333\n",
            "Selected Features: [3]\n",
            "Best Cross-Validation Accuracy: 0.7033333333333333\n"
          ]
        }
      ]
    }
  ]
}